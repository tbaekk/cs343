b)

    i)
    q1exception :   3.91u
    returnglobal:   3.40u
    returntype  :   32.35u
    returntypec :   4.19u

    q1exception :   3.46u (optimized)
    returnglobal:   3.42u (optimized)
    returntype  :   4.42u (optimized)
    returntypec :   3.40u (optimized)

    ii)
    returnglobal:   0.51u smaller
        - It has the fastest performance because it does not have to handle arguments 
        or throw/catch statements to handle errors during unwinding the stack.
    returntype  :   28.44u larger
        - It has the slowest performance because variant itself has a lot of inner
        operations and also when passed as an argument it slows down the process.
    returntypec :   0.28u slower
        - I think that it larger a bit slower than the original program because I have to
        use resources to manage the Union object to keep up-to date.

    iii)
    returnglobal:   0.04u smaller 
    returntype  :   0.96u larger
    returntypec :   0.06u smaller

c)

    i)
    (eperiod = 1000)
    q1exception :   4.26u
    returnglobal:   3.24u
    returntype  :   4.55u
    returntypec :   3.82u
    
    (eperiod = 100)
    q1exception :   11.15u
    returnglobal:   3.24u
    returntype  :   4.87u
    returntypec :   4.04u

    (eperiod = 50)
    q1exception :   18.85u
    returnglobal:   3.34u
    returntype  :   4.72u
    returntypec :   4.11u

    ii)
    (eperiod = 1000)
    returnglobal:   1.02u smaller
    returntype  :   0.29u larger
    returntypec :   0.44u smaller

    (eperiod = 100)
    returnglobal:   7.91 smaller
    returntype  :   6.28 smaller 
    returntypec :   7.11 smaller

    (eperiod = 50)
    returnglobal:   15.51 smaller
    returntype  :   14.13 smaller
    returntypec :   14.74 smaller

    --- Reasoning ---
    As the error period decreases, the original program performance becomes slower because more errors occurr, therefore
    there are more exceptions to be handled in the original program. On the other hand, transformed programs are not effected
    since they don't handle with try/catch errors.

    returnglobal
        - It has the fastest performance since it only has to changed the single global flag variable so the performance 
        is not affected although more errors are produced. 
    returntype
        - It only has to return appropriatly updated variant. Similar to other transformed programs, it does not have to
        handle with errors itself.
    returntypec
        - It has the second fastest performance since it uses enum as a flag to update whether errors occurred or not
        and initialize errors accordingly.